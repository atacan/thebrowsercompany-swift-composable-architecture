import Foundation

/// Interface to enable tracking/instrumenting the activity within TCA as ``Actions`` are sent into ``Store``s and
/// ``ViewStores``, ``Reducers`` are executed, and ``Effects`` are observed.
///
/// The way the library will call the closures provided is identical to the way that the ``Actions`` and ``Effects`` are
/// handled internally. That means that there is likely to be ``Instrumentation.ViewStore`` `will|did` pairs contained
/// within the bounds of an ``Instrumentation.Store`` `will|did` pair. For example: Consider sending a simple ``Action``
/// into a ``ViewStore`` that does not produce any synchronous ``Effects`` to be generated by a ``Reducer``, and the
/// ``ViewStore`` is scoped off a parent ``Store``s state:
/// ```
/// ViewStore.send(.someAction)
/// .pre, .viewStoreSend
///   Store.send(.someAction)
///   .pre, .storeSend
///     The Store will begin processing .someAction
///     .pre, .storeProcessEvent
///       The Store's reducer handles .someAction
///       Any returned actions from the reducer are queued up
///     .post, .storeProcessEvent
///     The above(willProcess -> didProcess) is repeated for each queued up action within Store
///     .pre, .storeChangeState
///       The Store updates its state
///       Any Stores based off the parent Store have their states updated, there for the below may be called multiple times
///       .pre, .viewStoreDeduplicate for impacted ViewStores
///       .post, .viewStoreDeduplicate
///       .pre, .viewStoreChangeState
///       If the value for a ViewStores state was not a duplicate, then it is updated
///       .post, .viewStoreChangeState
///     .post, .storeChangeState
///   .post, .store.didSend
/// .post, .viewStoreSend
/// ```
public class Instrumentation {
  /// Type indicating the action being taken by the store
  public enum CallbackKind {
    case storeSend
    case storeChangeState
    case storeProcessEvent
    case viewStoreSend
    case viewStoreChangeState
    case viewStoreDeduplicate
  }

  /// Type indicating if the callback is before or after the action begin taken by the store
  public enum CallbackTiming {
    case pre
    case post
  }

  /// The method to implement if a user of ComposableArchitecture would like to be notified about the "life cycle" of
  /// the various stores within the app as an action is acted upon.
  public typealias Callback = (CallbackInfo<Any, Any>, CallbackTiming, CallbackKind) -> Void
  let callback: Callback?

  public static let noop = Instrumentation()
  public static var shared: Instrumentation = .noop

  public init(callback: Callback? = nil) {
    self.callback = callback
  }
}

extension Instrumentation {
  /// Object that holds the information that will be passed to any implementation that has provided a callback function
  public struct CallbackInfo<StoreKind, Action> {
    /// The ``Type`` of the store that the callback is being executed within/for
    public let storeKind: StoreKind
    /// The action that was `sent` to the store
    public let action: Action?
    /// In the case of a ``Store.send`` operation the ``action`` may be one returned from a reducer and thus have an
    /// "originating" action (that action which was passed to the reducer that then returned the current ``action``)
    public let originatingAction: Action?

    init(storeKind: StoreKind, action: Action? = nil, originatingAction: Action? = nil) {
      self.storeKind = storeKind
      self.action = action
      self.originatingAction = originatingAction
    }

    func eraseToAny() -> CallbackInfo<Any, Any> {
      return .init(storeKind: (storeKind as Any), action: action.map { $0 as Any }, originatingAction: originatingAction.map { $0 as Any })
    }
  }
}
